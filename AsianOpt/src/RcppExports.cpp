// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// simulate_option_prices
std::vector<double> simulate_option_prices(int num_simulations, double S0, double K1, double K2, double K3, double sigma, double r, double T, double barrier, bool is_down_and_out);
RcppExport SEXP _AsianOpt_simulate_option_prices(SEXP num_simulationsSEXP, SEXP S0SEXP, SEXP K1SEXP, SEXP K2SEXP, SEXP K3SEXP, SEXP sigmaSEXP, SEXP rSEXP, SEXP TSEXP, SEXP barrierSEXP, SEXP is_down_and_outSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_simulations(num_simulationsSEXP);
    Rcpp::traits::input_parameter< double >::type S0(S0SEXP);
    Rcpp::traits::input_parameter< double >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< double >::type K2(K2SEXP);
    Rcpp::traits::input_parameter< double >::type K3(K3SEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type barrier(barrierSEXP);
    Rcpp::traits::input_parameter< bool >::type is_down_and_out(is_down_and_outSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_option_prices(num_simulations, S0, K1, K2, K3, sigma, r, T, barrier, is_down_and_out));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_AsianOpt_simulate_option_prices", (DL_FUNC) &_AsianOpt_simulate_option_prices, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_AsianOpt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
